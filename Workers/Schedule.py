from datetime import datetime
from aiogram import Dispatcher, types
from DB import DBConn, DBRepository
from Config import scheduler, dp, bot, PATH, VIDEO_TEXTS

def schedule():
    scheduler.add_job(video_func, 'cron', hour=14, args=(dp,), misfire_grace_time=1000)
    scheduler.add_job(text_func, 'cron', hour=10, args=(dp,), misfire_grace_time=1000)


final_message= '''
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é,–Ω–∞—à –º–∞—Ä–∞—Ñ–æ–Ω <tg-spoiler>–∑–∞–∫–æ–Ω—á–∏–ª—Å—èüò¢</tg-spoiler>

–ù–∞–º –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ‚ù§Ô∏è
–ê —ç—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ üî•

–ù–æ —Ç–∞–∫–∂–µ –Ω–∞–º —Å –ò—Ä–∏–Ω–æ–π –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É –º–∞—Ä–∞—Ñ–æ–Ω–∞:
-—á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –∂–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? 
-—á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ?
-—á—Ç–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å?
-–í–∞—à–µ –æ—â—É—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ (–ø–æ–±–æ—Ä–æ–ª–∏ –ª–∏ –≤–æ —Å—Ç—Ä–∞—Ö –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö,–∫–∞–∫ –≤—ã—Ä–æ—Å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ —Ç–¥)

–õ—é–±–∞—è –∫—Ä–∏—Ç–∏–∫–∞ –±—É–¥—å –æ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –¥–∞–µ—Ç —Ç–æ–ª—á–æ–∫ —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥üìà

–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ,—É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—ÖüìΩÔ∏è‚ù§Ô∏è
'''

async def text_func(dp: Dispatcher):
    premium_users = DBConn.TextsTaskAt10AM()
    for user in premium_users:
        indexes = user.get('indexes')
        texts = DBRepository.GetTextsByIndex(indexes[0], indexes[1])
        for text in texts:
            try:
                await bot.send_message(
                user.get('external_id'),
                text
            )
            except :
                ...
        if DBConn.CheckSubscriptionIsOver(user.get('external_id')):
            try:
                await bot.send_message(
            user.get('external_id'),
            final_message,
            parse_mode='html'
            )
            except:
                ...
        DBConn.IncrementSentTexts(user.get('external_id'))
        
        
async def video_func(dp: Dispatcher):
    premium_users = DBConn.VideoTaskAt2PM()
    for user in premium_users:
        index = user.get('index')
        video_index= DBRepository.GetVideoIndex(index)
        if (video_index!=-1):
            try:
                await bot.send_video(
                user.get('external_id'),
                video=types.InputFile(PATH.parent.joinpath('Videos').joinpath(f'{video_index+1}.mov')),
                caption=VIDEO_TEXTS[video_index]
            )
            except:
                ...
        DBConn.IncrementSentVideo(user.get('external_id'))
    
